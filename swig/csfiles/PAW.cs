//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class PAW : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal PAW(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(PAW obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~PAW() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          LandmarkDetectorPINVOKE.delete_PAW(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public int number_of_pixels {
    set {
      LandmarkDetectorPINVOKE.PAW_number_of_pixels_set(swigCPtr, value);
    } 
    get {
      int ret = LandmarkDetectorPINVOKE.PAW_number_of_pixels_get(swigCPtr);
      return ret;
    } 
  }

  public double min_x {
    set {
      LandmarkDetectorPINVOKE.PAW_min_x_set(swigCPtr, value);
    } 
    get {
      double ret = LandmarkDetectorPINVOKE.PAW_min_x_get(swigCPtr);
      return ret;
    } 
  }

  public double min_y {
    set {
      LandmarkDetectorPINVOKE.PAW_min_y_set(swigCPtr, value);
    } 
    get {
      double ret = LandmarkDetectorPINVOKE.PAW_min_y_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_cv__Mat_T_double_t destination_landmarks {
    set {
      LandmarkDetectorPINVOKE.PAW_destination_landmarks_set(swigCPtr, SWIGTYPE_p_cv__Mat_T_double_t.getCPtr(value));
      if (LandmarkDetectorPINVOKE.SWIGPendingException.Pending) throw LandmarkDetectorPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_cv__Mat_T_double_t ret = new SWIGTYPE_p_cv__Mat_T_double_t(LandmarkDetectorPINVOKE.PAW_destination_landmarks_get(swigCPtr), true);
      if (LandmarkDetectorPINVOKE.SWIGPendingException.Pending) throw LandmarkDetectorPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_cv__Mat_T_double_t source_landmarks {
    set {
      LandmarkDetectorPINVOKE.PAW_source_landmarks_set(swigCPtr, SWIGTYPE_p_cv__Mat_T_double_t.getCPtr(value));
      if (LandmarkDetectorPINVOKE.SWIGPendingException.Pending) throw LandmarkDetectorPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_cv__Mat_T_double_t ret = new SWIGTYPE_p_cv__Mat_T_double_t(LandmarkDetectorPINVOKE.PAW_source_landmarks_get(swigCPtr), true);
      if (LandmarkDetectorPINVOKE.SWIGPendingException.Pending) throw LandmarkDetectorPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_cv__Mat_T_int_t triangulation {
    set {
      LandmarkDetectorPINVOKE.PAW_triangulation_set(swigCPtr, SWIGTYPE_p_cv__Mat_T_int_t.getCPtr(value));
      if (LandmarkDetectorPINVOKE.SWIGPendingException.Pending) throw LandmarkDetectorPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_cv__Mat_T_int_t ret = new SWIGTYPE_p_cv__Mat_T_int_t(LandmarkDetectorPINVOKE.PAW_triangulation_get(swigCPtr), true);
      if (LandmarkDetectorPINVOKE.SWIGPendingException.Pending) throw LandmarkDetectorPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_cv__Mat_T_int_t triangle_id {
    set {
      LandmarkDetectorPINVOKE.PAW_triangle_id_set(swigCPtr, SWIGTYPE_p_cv__Mat_T_int_t.getCPtr(value));
      if (LandmarkDetectorPINVOKE.SWIGPendingException.Pending) throw LandmarkDetectorPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_cv__Mat_T_int_t ret = new SWIGTYPE_p_cv__Mat_T_int_t(LandmarkDetectorPINVOKE.PAW_triangle_id_get(swigCPtr), true);
      if (LandmarkDetectorPINVOKE.SWIGPendingException.Pending) throw LandmarkDetectorPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_cv__Mat_T_uchar_t pixel_mask {
    set {
      LandmarkDetectorPINVOKE.PAW_pixel_mask_set(swigCPtr, SWIGTYPE_p_cv__Mat_T_uchar_t.getCPtr(value));
      if (LandmarkDetectorPINVOKE.SWIGPendingException.Pending) throw LandmarkDetectorPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_cv__Mat_T_uchar_t ret = new SWIGTYPE_p_cv__Mat_T_uchar_t(LandmarkDetectorPINVOKE.PAW_pixel_mask_get(swigCPtr), true);
      if (LandmarkDetectorPINVOKE.SWIGPendingException.Pending) throw LandmarkDetectorPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_cv__Mat_T_double_t coefficients {
    set {
      LandmarkDetectorPINVOKE.PAW_coefficients_set(swigCPtr, SWIGTYPE_p_cv__Mat_T_double_t.getCPtr(value));
      if (LandmarkDetectorPINVOKE.SWIGPendingException.Pending) throw LandmarkDetectorPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_cv__Mat_T_double_t ret = new SWIGTYPE_p_cv__Mat_T_double_t(LandmarkDetectorPINVOKE.PAW_coefficients_get(swigCPtr), true);
      if (LandmarkDetectorPINVOKE.SWIGPendingException.Pending) throw LandmarkDetectorPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_cv__Mat_T_double_t alpha {
    set {
      LandmarkDetectorPINVOKE.PAW_alpha_set(swigCPtr, SWIGTYPE_p_cv__Mat_T_double_t.getCPtr(value));
      if (LandmarkDetectorPINVOKE.SWIGPendingException.Pending) throw LandmarkDetectorPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_cv__Mat_T_double_t ret = new SWIGTYPE_p_cv__Mat_T_double_t(LandmarkDetectorPINVOKE.PAW_alpha_get(swigCPtr), true);
      if (LandmarkDetectorPINVOKE.SWIGPendingException.Pending) throw LandmarkDetectorPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_cv__Mat_T_double_t beta {
    set {
      LandmarkDetectorPINVOKE.PAW_beta_set(swigCPtr, SWIGTYPE_p_cv__Mat_T_double_t.getCPtr(value));
      if (LandmarkDetectorPINVOKE.SWIGPendingException.Pending) throw LandmarkDetectorPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_cv__Mat_T_double_t ret = new SWIGTYPE_p_cv__Mat_T_double_t(LandmarkDetectorPINVOKE.PAW_beta_get(swigCPtr), true);
      if (LandmarkDetectorPINVOKE.SWIGPendingException.Pending) throw LandmarkDetectorPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_cv__Mat_T_float_t map_x {
    set {
      LandmarkDetectorPINVOKE.PAW_map_x_set(swigCPtr, SWIGTYPE_p_cv__Mat_T_float_t.getCPtr(value));
      if (LandmarkDetectorPINVOKE.SWIGPendingException.Pending) throw LandmarkDetectorPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_cv__Mat_T_float_t ret = new SWIGTYPE_p_cv__Mat_T_float_t(LandmarkDetectorPINVOKE.PAW_map_x_get(swigCPtr), true);
      if (LandmarkDetectorPINVOKE.SWIGPendingException.Pending) throw LandmarkDetectorPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_cv__Mat_T_float_t map_y {
    set {
      LandmarkDetectorPINVOKE.PAW_map_y_set(swigCPtr, SWIGTYPE_p_cv__Mat_T_float_t.getCPtr(value));
      if (LandmarkDetectorPINVOKE.SWIGPendingException.Pending) throw LandmarkDetectorPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_cv__Mat_T_float_t ret = new SWIGTYPE_p_cv__Mat_T_float_t(LandmarkDetectorPINVOKE.PAW_map_y_get(swigCPtr), true);
      if (LandmarkDetectorPINVOKE.SWIGPendingException.Pending) throw LandmarkDetectorPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public PAW() : this(LandmarkDetectorPINVOKE.new_PAW__SWIG_0(), true) {
  }

  public PAW(SWIGTYPE_p_cv__Mat_T_double_t destination_shape, SWIGTYPE_p_cv__Mat_T_int_t triangulation) : this(LandmarkDetectorPINVOKE.new_PAW__SWIG_1(SWIGTYPE_p_cv__Mat_T_double_t.getCPtr(destination_shape), SWIGTYPE_p_cv__Mat_T_int_t.getCPtr(triangulation)), true) {
    if (LandmarkDetectorPINVOKE.SWIGPendingException.Pending) throw LandmarkDetectorPINVOKE.SWIGPendingException.Retrieve();
  }

  public PAW(SWIGTYPE_p_cv__Mat_T_double_t destination_shape, SWIGTYPE_p_cv__Mat_T_int_t triangulation, double in_min_x, double in_min_y, double in_max_x, double in_max_y) : this(LandmarkDetectorPINVOKE.new_PAW__SWIG_2(SWIGTYPE_p_cv__Mat_T_double_t.getCPtr(destination_shape), SWIGTYPE_p_cv__Mat_T_int_t.getCPtr(triangulation), in_min_x, in_min_y, in_max_x, in_max_y), true) {
    if (LandmarkDetectorPINVOKE.SWIGPendingException.Pending) throw LandmarkDetectorPINVOKE.SWIGPendingException.Retrieve();
  }

  public PAW(PAW other) : this(LandmarkDetectorPINVOKE.new_PAW__SWIG_3(PAW.getCPtr(other)), true) {
    if (LandmarkDetectorPINVOKE.SWIGPendingException.Pending) throw LandmarkDetectorPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Read(SWIGTYPE_p_std__ifstream s) {
    LandmarkDetectorPINVOKE.PAW_Read(swigCPtr, SWIGTYPE_p_std__ifstream.getCPtr(s));
    if (LandmarkDetectorPINVOKE.SWIGPendingException.Pending) throw LandmarkDetectorPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Warp(SWIGTYPE_p_cv__Mat image_to_warp, SWIGTYPE_p_cv__Mat destination_image, SWIGTYPE_p_cv__Mat_T_double_t landmarks_to_warp) {
    LandmarkDetectorPINVOKE.PAW_Warp(swigCPtr, SWIGTYPE_p_cv__Mat.getCPtr(image_to_warp), SWIGTYPE_p_cv__Mat.getCPtr(destination_image), SWIGTYPE_p_cv__Mat_T_double_t.getCPtr(landmarks_to_warp));
    if (LandmarkDetectorPINVOKE.SWIGPendingException.Pending) throw LandmarkDetectorPINVOKE.SWIGPendingException.Retrieve();
  }

  public void CalcCoeff() {
    LandmarkDetectorPINVOKE.PAW_CalcCoeff(swigCPtr);
  }

  public void WarpRegion(SWIGTYPE_p_cv__Mat_T_float_t map_x, SWIGTYPE_p_cv__Mat_T_float_t map_y) {
    LandmarkDetectorPINVOKE.PAW_WarpRegion(swigCPtr, SWIGTYPE_p_cv__Mat_T_float_t.getCPtr(map_x), SWIGTYPE_p_cv__Mat_T_float_t.getCPtr(map_y));
    if (LandmarkDetectorPINVOKE.SWIGPendingException.Pending) throw LandmarkDetectorPINVOKE.SWIGPendingException.Retrieve();
  }

  public int NumberOfLandmarks() {
    int ret = LandmarkDetectorPINVOKE.PAW_NumberOfLandmarks(swigCPtr);
    return ret;
  }

  public int NumberOfTriangles() {
    int ret = LandmarkDetectorPINVOKE.PAW_NumberOfTriangles(swigCPtr);
    return ret;
  }

  public int constWidth() {
    int ret = LandmarkDetectorPINVOKE.PAW_constWidth(swigCPtr);
    return ret;
  }

  public int Height() {
    int ret = LandmarkDetectorPINVOKE.PAW_Height(swigCPtr);
    return ret;
  }

}
