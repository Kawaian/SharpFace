//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class Patch_experts : global::System.IDisposable
{
    private global::System.Runtime.InteropServices.HandleRef swigCPtr;
    protected bool swigCMemOwn;

    internal Patch_experts(global::System.IntPtr cPtr, bool cMemoryOwn)
    {
        swigCMemOwn = cMemoryOwn;
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
    }

    internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Patch_experts obj)
    {
        return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
    }

    ~Patch_experts()
    {
        Dispose();
    }

    public virtual void Dispose()
    {
        lock(this)
        {
            if (swigCPtr.Handle != global::System.IntPtr.Zero)
            {
                if (swigCMemOwn)
                {
                    swigCMemOwn = false;
                    LandmarkDetectorPINVOKE.delete_Patch_experts(swigCPtr);
                }
                swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
            }
            global::System.GC.SuppressFinalize(this);
        }
    }

    public SWIGTYPE_p_std__vectorT_std__vectorT_std__vectorT_Multi_SVR_patch_expert_t_t_t svr_expert_intensity
    {
        set
        {
            LandmarkDetectorPINVOKE.Patch_experts_svr_expert_intensity_set(swigCPtr, SWIGTYPE_p_std__vectorT_std__vectorT_std__vectorT_Multi_SVR_patch_expert_t_t_t.getCPtr(value));
        }
        get
        {
            global::System.IntPtr cPtr = LandmarkDetectorPINVOKE.Patch_experts_svr_expert_intensity_get(swigCPtr);
            SWIGTYPE_p_std__vectorT_std__vectorT_std__vectorT_Multi_SVR_patch_expert_t_t_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_std__vectorT_std__vectorT_std__vectorT_Multi_SVR_patch_expert_t_t_t(cPtr, false);
            return ret;
        }
    }

    public SWIGTYPE_p_std__vectorT_std__vectorT_std__vectorT_LandmarkDetector__CCNF_patch_expert_t_t_t ccnf_expert_intensity
    {
        set
        {
            LandmarkDetectorPINVOKE.Patch_experts_ccnf_expert_intensity_set(swigCPtr, SWIGTYPE_p_std__vectorT_std__vectorT_std__vectorT_LandmarkDetector__CCNF_patch_expert_t_t_t.getCPtr(value));
        }
        get
        {
            global::System.IntPtr cPtr = LandmarkDetectorPINVOKE.Patch_experts_ccnf_expert_intensity_get(swigCPtr);
            SWIGTYPE_p_std__vectorT_std__vectorT_std__vectorT_LandmarkDetector__CCNF_patch_expert_t_t_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_std__vectorT_std__vectorT_std__vectorT_LandmarkDetector__CCNF_patch_expert_t_t_t(cPtr, false);
            return ret;
        }
    }

    public FloatMatList2N sigma_components
    {
        set
        {
            LandmarkDetectorPINVOKE.Patch_experts_sigma_components_set(swigCPtr, FloatMatList2N.getCPtr(value));
        }
        get
        {
            global::System.IntPtr cPtr = LandmarkDetectorPINVOKE.Patch_experts_sigma_components_get(swigCPtr);
            FloatMatList2N ret = (cPtr == global::System.IntPtr.Zero) ? null : new FloatMatList2N(cPtr, false);
            return ret;
        }
    }

    public DoubleList patch_scaling
    {
        set
        {
            LandmarkDetectorPINVOKE.Patch_experts_patch_scaling_set(swigCPtr, DoubleList.getCPtr(value));
        }
        get
        {
            global::System.IntPtr cPtr = LandmarkDetectorPINVOKE.Patch_experts_patch_scaling_get(swigCPtr);
            DoubleList ret = (cPtr == global::System.IntPtr.Zero) ? null : new DoubleList(cPtr, false);
            return ret;
        }
    }

    public SWIGTYPE_p_std__vectorT_std__vectorT_cv__Vec3d_t_t centers
    {
        set
        {
            LandmarkDetectorPINVOKE.Patch_experts_centers_set(swigCPtr, SWIGTYPE_p_std__vectorT_std__vectorT_cv__Vec3d_t_t.getCPtr(value));
        }
        get
        {
            global::System.IntPtr cPtr = LandmarkDetectorPINVOKE.Patch_experts_centers_get(swigCPtr);
            SWIGTYPE_p_std__vectorT_std__vectorT_cv__Vec3d_t_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_std__vectorT_std__vectorT_cv__Vec3d_t_t(cPtr, false);
            return ret;
        }
    }

    public IntMatList2N visibilities
    {
        set
        {
            LandmarkDetectorPINVOKE.Patch_experts_visibilities_set(swigCPtr, IntMatList2N.getCPtr(value));
        }
        get
        {
            global::System.IntPtr cPtr = LandmarkDetectorPINVOKE.Patch_experts_visibilities_get(swigCPtr);
            IntMatList2N ret = (cPtr == global::System.IntPtr.Zero) ? null : new IntMatList2N(cPtr, false);
            return ret;
        }
    }

    public Patch_experts() : this(LandmarkDetectorPINVOKE.new_Patch_experts__SWIG_0(), true)
    {
    }

    public Patch_experts(Patch_experts other) : this(LandmarkDetectorPINVOKE.new_Patch_experts__SWIG_1(Patch_experts.getCPtr(other)), true)
    {
        if (LandmarkDetectorPINVOKE.SWIGPendingException.Pending) throw LandmarkDetectorPINVOKE.SWIGPendingException.Retrieve();
    }

    public void Response(FloatMatList patch_expert_responses, SWIGTYPE_p_cv__Matx22f sim_ref_to_img, SWIGTYPE_p_cv__Matx22d sim_img_to_ref, SWIGTYPE_p_cv__Mat_T_uchar_t grayscale_image, SWIGTYPE_p_PDM pdm, SWIGTYPE_p_cv__Vec6d params_global, SWIGTYPE_p_cv__Mat_T_double_t params_local, int window_size, int scale)
    {
        LandmarkDetectorPINVOKE.Patch_experts_Response(swigCPtr, FloatMatList.getCPtr(patch_expert_responses), SWIGTYPE_p_cv__Matx22f.getCPtr(sim_ref_to_img), SWIGTYPE_p_cv__Matx22d.getCPtr(sim_img_to_ref), SWIGTYPE_p_cv__Mat_T_uchar_t.getCPtr(grayscale_image), SWIGTYPE_p_PDM.getCPtr(pdm), SWIGTYPE_p_cv__Vec6d.getCPtr(params_global), SWIGTYPE_p_cv__Mat_T_double_t.getCPtr(params_local), window_size, scale);
        if (LandmarkDetectorPINVOKE.SWIGPendingException.Pending) throw LandmarkDetectorPINVOKE.SWIGPendingException.Retrieve();
    }

    public int GetViewIdx(SWIGTYPE_p_cv__Vec6d params_global, int scale)
    {
        int ret = LandmarkDetectorPINVOKE.Patch_experts_GetViewIdx(swigCPtr, SWIGTYPE_p_cv__Vec6d.getCPtr(params_global), scale);
        if (LandmarkDetectorPINVOKE.SWIGPendingException.Pending) throw LandmarkDetectorPINVOKE.SWIGPendingException.Retrieve();
        return ret;
    }

    public int nViews(uint scale)
    {
        int ret = LandmarkDetectorPINVOKE.Patch_experts_nViews__SWIG_0(swigCPtr, scale);
        return ret;
    }

    public int nViews()
    {
        int ret = LandmarkDetectorPINVOKE.Patch_experts_nViews__SWIG_1(swigCPtr);
        return ret;
    }

    public void Read(StringList intensity_svr_expert_locations, StringList intensity_ccnf_expert_locations)
    {
        LandmarkDetectorPINVOKE.Patch_experts_Read(swigCPtr, StringList.getCPtr(intensity_svr_expert_locations), StringList.getCPtr(intensity_ccnf_expert_locations));
        if (LandmarkDetectorPINVOKE.SWIGPendingException.Pending) throw LandmarkDetectorPINVOKE.SWIGPendingException.Retrieve();
    }

}
