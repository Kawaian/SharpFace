//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class CLNF : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal CLNF(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CLNF obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~CLNF() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          LaandmrkDetectorPINVOKE.delete_CLNF(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public SWIGTYPE_p_PDM pdm {
    set {
      LaandmrkDetectorPINVOKE.CLNF_pdm_set(swigCPtr, SWIGTYPE_p_PDM.getCPtr(value));
      if (LaandmrkDetectorPINVOKE.SWIGPendingException.Pending) throw LaandmrkDetectorPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_PDM ret = new SWIGTYPE_p_PDM(LaandmrkDetectorPINVOKE.CLNF_pdm_get(swigCPtr), true);
      if (LaandmrkDetectorPINVOKE.SWIGPendingException.Pending) throw LaandmrkDetectorPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_Patch_experts patch_experts {
    set {
      LaandmrkDetectorPINVOKE.CLNF_patch_experts_set(swigCPtr, SWIGTYPE_p_Patch_experts.getCPtr(value));
      if (LaandmrkDetectorPINVOKE.SWIGPendingException.Pending) throw LaandmrkDetectorPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_Patch_experts ret = new SWIGTYPE_p_Patch_experts(LaandmrkDetectorPINVOKE.CLNF_patch_experts_get(swigCPtr), true);
      if (LaandmrkDetectorPINVOKE.SWIGPendingException.Pending) throw LaandmrkDetectorPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_cv__Mat_T_double_t params_local {
    set {
      LaandmrkDetectorPINVOKE.CLNF_params_local_set(swigCPtr, SWIGTYPE_p_cv__Mat_T_double_t.getCPtr(value));
      if (LaandmrkDetectorPINVOKE.SWIGPendingException.Pending) throw LaandmrkDetectorPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_cv__Mat_T_double_t ret = new SWIGTYPE_p_cv__Mat_T_double_t(LaandmrkDetectorPINVOKE.CLNF_params_local_get(swigCPtr), true);
      if (LaandmrkDetectorPINVOKE.SWIGPendingException.Pending) throw LaandmrkDetectorPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_cv__Vec6d params_global {
    set {
      LaandmrkDetectorPINVOKE.CLNF_params_global_set(swigCPtr, SWIGTYPE_p_cv__Vec6d.getCPtr(value));
      if (LaandmrkDetectorPINVOKE.SWIGPendingException.Pending) throw LaandmrkDetectorPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_cv__Vec6d ret = new SWIGTYPE_p_cv__Vec6d(LaandmrkDetectorPINVOKE.CLNF_params_global_get(swigCPtr), true);
      if (LaandmrkDetectorPINVOKE.SWIGPendingException.Pending) throw LaandmrkDetectorPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_std__vectorT_LandmarkDetector__CLNF_t hierarchical_models {
    set {
      LaandmrkDetectorPINVOKE.CLNF_hierarchical_models_set(swigCPtr, SWIGTYPE_p_std__vectorT_LandmarkDetector__CLNF_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = LaandmrkDetectorPINVOKE.CLNF_hierarchical_models_get(swigCPtr);
      SWIGTYPE_p_std__vectorT_LandmarkDetector__CLNF_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_std__vectorT_LandmarkDetector__CLNF_t(cPtr, false);
      return ret;
    } 
  }

  public String_List hierarchical_model_names {
    set {
      LaandmrkDetectorPINVOKE.CLNF_hierarchical_model_names_set(swigCPtr, String_List.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = LaandmrkDetectorPINVOKE.CLNF_hierarchical_model_names_get(swigCPtr);
      String_List ret = (cPtr == global::System.IntPtr.Zero) ? null : new String_List(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_std__vectorT_std__vectorT_std__pairT_int_int_t_t_t hierarchical_mapping {
    set {
      LaandmrkDetectorPINVOKE.CLNF_hierarchical_mapping_set(swigCPtr, SWIGTYPE_p_std__vectorT_std__vectorT_std__pairT_int_int_t_t_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = LaandmrkDetectorPINVOKE.CLNF_hierarchical_mapping_get(swigCPtr);
      SWIGTYPE_p_std__vectorT_std__vectorT_std__pairT_int_int_t_t_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_std__vectorT_std__vectorT_std__pairT_int_int_t_t_t(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_std__vectorT_FaceModelParameters_t hierarchical_params {
    set {
      LaandmrkDetectorPINVOKE.CLNF_hierarchical_params_set(swigCPtr, SWIGTYPE_p_std__vectorT_FaceModelParameters_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = LaandmrkDetectorPINVOKE.CLNF_hierarchical_params_get(swigCPtr);
      SWIGTYPE_p_std__vectorT_FaceModelParameters_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_std__vectorT_FaceModelParameters_t(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_cv__CascadeClassifier face_detector_HAAR {
    set {
      LaandmrkDetectorPINVOKE.CLNF_face_detector_HAAR_set(swigCPtr, SWIGTYPE_p_cv__CascadeClassifier.getCPtr(value));
      if (LaandmrkDetectorPINVOKE.SWIGPendingException.Pending) throw LaandmrkDetectorPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_cv__CascadeClassifier ret = new SWIGTYPE_p_cv__CascadeClassifier(LaandmrkDetectorPINVOKE.CLNF_face_detector_HAAR_get(swigCPtr), true);
      if (LaandmrkDetectorPINVOKE.SWIGPendingException.Pending) throw LaandmrkDetectorPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public string face_detector_location {
    set {
      LaandmrkDetectorPINVOKE.CLNF_face_detector_location_set(swigCPtr, value);
      if (LaandmrkDetectorPINVOKE.SWIGPendingException.Pending) throw LaandmrkDetectorPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = LaandmrkDetectorPINVOKE.CLNF_face_detector_location_get(swigCPtr);
      if (LaandmrkDetectorPINVOKE.SWIGPendingException.Pending) throw LaandmrkDetectorPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_dlib__frontal_face_detector face_detector_HOG {
    set {
      LaandmrkDetectorPINVOKE.CLNF_face_detector_HOG_set(swigCPtr, SWIGTYPE_p_dlib__frontal_face_detector.getCPtr(value));
      if (LaandmrkDetectorPINVOKE.SWIGPendingException.Pending) throw LaandmrkDetectorPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_dlib__frontal_face_detector ret = new SWIGTYPE_p_dlib__frontal_face_detector(LaandmrkDetectorPINVOKE.CLNF_face_detector_HOG_get(swigCPtr), true);
      if (LaandmrkDetectorPINVOKE.SWIGPendingException.Pending) throw LaandmrkDetectorPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public DetectionValidator landmark_validator {
    set {
      LaandmrkDetectorPINVOKE.CLNF_landmark_validator_set(swigCPtr, DetectionValidator.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = LaandmrkDetectorPINVOKE.CLNF_landmark_validator_get(swigCPtr);
      DetectionValidator ret = (cPtr == global::System.IntPtr.Zero) ? null : new DetectionValidator(cPtr, false);
      return ret;
    } 
  }

  public bool detection_success {
    set {
      LaandmrkDetectorPINVOKE.CLNF_detection_success_set(swigCPtr, value);
    } 
    get {
      bool ret = LaandmrkDetectorPINVOKE.CLNF_detection_success_get(swigCPtr);
      return ret;
    } 
  }

  public bool tracking_initialised {
    set {
      LaandmrkDetectorPINVOKE.CLNF_tracking_initialised_set(swigCPtr, value);
    } 
    get {
      bool ret = LaandmrkDetectorPINVOKE.CLNF_tracking_initialised_get(swigCPtr);
      return ret;
    } 
  }

  public double detection_certainty {
    set {
      LaandmrkDetectorPINVOKE.CLNF_detection_certainty_set(swigCPtr, value);
    } 
    get {
      double ret = LaandmrkDetectorPINVOKE.CLNF_detection_certainty_get(swigCPtr);
      return ret;
    } 
  }

  public bool eye_model {
    set {
      LaandmrkDetectorPINVOKE.CLNF_eye_model_set(swigCPtr, value);
    } 
    get {
      bool ret = LaandmrkDetectorPINVOKE.CLNF_eye_model_get(swigCPtr);
      return ret;
    } 
  }

  public IntMat_List triangulations {
    set {
      LaandmrkDetectorPINVOKE.CLNF_triangulations_set(swigCPtr, IntMat_List.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = LaandmrkDetectorPINVOKE.CLNF_triangulations_get(swigCPtr);
      IntMat_List ret = (cPtr == global::System.IntPtr.Zero) ? null : new IntMat_List(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_cv__Mat_T_double_t detected_landmarks {
    set {
      LaandmrkDetectorPINVOKE.CLNF_detected_landmarks_set(swigCPtr, SWIGTYPE_p_cv__Mat_T_double_t.getCPtr(value));
      if (LaandmrkDetectorPINVOKE.SWIGPendingException.Pending) throw LaandmrkDetectorPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_cv__Mat_T_double_t ret = new SWIGTYPE_p_cv__Mat_T_double_t(LaandmrkDetectorPINVOKE.CLNF_detected_landmarks_get(swigCPtr), true);
      if (LaandmrkDetectorPINVOKE.SWIGPendingException.Pending) throw LaandmrkDetectorPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public double model_likelihood {
    set {
      LaandmrkDetectorPINVOKE.CLNF_model_likelihood_set(swigCPtr, value);
    } 
    get {
      double ret = LaandmrkDetectorPINVOKE.CLNF_model_likelihood_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_cv__Mat_T_double_t landmark_likelihoods {
    set {
      LaandmrkDetectorPINVOKE.CLNF_landmark_likelihoods_set(swigCPtr, SWIGTYPE_p_cv__Mat_T_double_t.getCPtr(value));
      if (LaandmrkDetectorPINVOKE.SWIGPendingException.Pending) throw LaandmrkDetectorPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_cv__Mat_T_double_t ret = new SWIGTYPE_p_cv__Mat_T_double_t(LaandmrkDetectorPINVOKE.CLNF_landmark_likelihoods_get(swigCPtr), true);
      if (LaandmrkDetectorPINVOKE.SWIGPendingException.Pending) throw LaandmrkDetectorPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public int failures_in_a_row {
    set {
      LaandmrkDetectorPINVOKE.CLNF_failures_in_a_row_set(swigCPtr, value);
    } 
    get {
      int ret = LaandmrkDetectorPINVOKE.CLNF_failures_in_a_row_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_cv__Mat_T_uchar_t face_template {
    set {
      LaandmrkDetectorPINVOKE.CLNF_face_template_set(swigCPtr, SWIGTYPE_p_cv__Mat_T_uchar_t.getCPtr(value));
      if (LaandmrkDetectorPINVOKE.SWIGPendingException.Pending) throw LaandmrkDetectorPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_cv__Mat_T_uchar_t ret = new SWIGTYPE_p_cv__Mat_T_uchar_t(LaandmrkDetectorPINVOKE.CLNF_face_template_get(swigCPtr), true);
      if (LaandmrkDetectorPINVOKE.SWIGPendingException.Pending) throw LaandmrkDetectorPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_cv__Point_T_double_t preference_det {
    set {
      LaandmrkDetectorPINVOKE.CLNF_preference_det_set(swigCPtr, SWIGTYPE_p_cv__Point_T_double_t.getCPtr(value));
      if (LaandmrkDetectorPINVOKE.SWIGPendingException.Pending) throw LaandmrkDetectorPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_cv__Point_T_double_t ret = new SWIGTYPE_p_cv__Point_T_double_t(LaandmrkDetectorPINVOKE.CLNF_preference_det_get(swigCPtr), true);
      if (LaandmrkDetectorPINVOKE.SWIGPendingException.Pending) throw LaandmrkDetectorPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public CLNF() : this(LaandmrkDetectorPINVOKE.new_CLNF__SWIG_0(), true) {
  }

  public CLNF(string fname) : this(LaandmrkDetectorPINVOKE.new_CLNF__SWIG_1(fname), true) {
    if (LaandmrkDetectorPINVOKE.SWIGPendingException.Pending) throw LaandmrkDetectorPINVOKE.SWIGPendingException.Retrieve();
  }

  public CLNF(CLNF other) : this(LaandmrkDetectorPINVOKE.new_CLNF__SWIG_2(CLNF.getCPtr(other)), true) {
    if (LaandmrkDetectorPINVOKE.SWIGPendingException.Pending) throw LaandmrkDetectorPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool DetectLandmarks(SWIGTYPE_p_cv__Mat_T_uchar_t image, SWIGTYPE_p_FaceModelParameters arg1) {
    bool ret = LaandmrkDetectorPINVOKE.CLNF_DetectLandmarks(swigCPtr, SWIGTYPE_p_cv__Mat_T_uchar_t.getCPtr(image), SWIGTYPE_p_FaceModelParameters.getCPtr(arg1));
    if (LaandmrkDetectorPINVOKE.SWIGPendingException.Pending) throw LaandmrkDetectorPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_cv__Mat_T_double_t GetShape(double fx, double fy, double cx, double cy) {
    SWIGTYPE_p_cv__Mat_T_double_t ret = new SWIGTYPE_p_cv__Mat_T_double_t(LaandmrkDetectorPINVOKE.CLNF_GetShape(swigCPtr, fx, fy, cx, cy), true);
    return ret;
  }

  public SWIGTYPE_p_cv__Rect_T_double_t GetBoundingBox() {
    SWIGTYPE_p_cv__Rect_T_double_t ret = new SWIGTYPE_p_cv__Rect_T_double_t(LaandmrkDetectorPINVOKE.CLNF_GetBoundingBox(swigCPtr), true);
    return ret;
  }

  public void Reset() {
    LaandmrkDetectorPINVOKE.CLNF_Reset__SWIG_0(swigCPtr);
  }

  public void Reset(double x, double y) {
    LaandmrkDetectorPINVOKE.CLNF_Reset__SWIG_1(swigCPtr, x, y);
  }

  public void Read(string name) {
    LaandmrkDetectorPINVOKE.CLNF_Read(swigCPtr, name);
    if (LaandmrkDetectorPINVOKE.SWIGPendingException.Pending) throw LaandmrkDetectorPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Read_CLNF(string clnf_location) {
    LaandmrkDetectorPINVOKE.CLNF_Read_CLNF(swigCPtr, clnf_location);
    if (LaandmrkDetectorPINVOKE.SWIGPendingException.Pending) throw LaandmrkDetectorPINVOKE.SWIGPendingException.Retrieve();
  }

}
