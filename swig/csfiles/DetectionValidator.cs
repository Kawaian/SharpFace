//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class DetectionValidator : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal DetectionValidator(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(DetectionValidator obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~DetectionValidator() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          LandmarkDetectorPINVOKE.delete_DetectionValidator(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public int validator_type {
    set {
      LandmarkDetectorPINVOKE.DetectionValidator_validator_type_set(swigCPtr, value);
    } 
    get {
      int ret = LandmarkDetectorPINVOKE.DetectionValidator_validator_type_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_std__vectorT_cv__Vec3d_t orientations {
    set {
      LandmarkDetectorPINVOKE.DetectionValidator_orientations_set(swigCPtr, SWIGTYPE_p_std__vectorT_cv__Vec3d_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = LandmarkDetectorPINVOKE.DetectionValidator_orientations_get(swigCPtr);
      SWIGTYPE_p_std__vectorT_cv__Vec3d_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_std__vectorT_cv__Vec3d_t(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_std__vectorT_PAW_t paws {
    set {
      LandmarkDetectorPINVOKE.DetectionValidator_paws_set(swigCPtr, SWIGTYPE_p_std__vectorT_PAW_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = LandmarkDetectorPINVOKE.DetectionValidator_paws_get(swigCPtr);
      SWIGTYPE_p_std__vectorT_PAW_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_std__vectorT_PAW_t(cPtr, false);
      return ret;
    } 
  }

  public DoubleList bs {
    set {
      LandmarkDetectorPINVOKE.DetectionValidator_bs_set(swigCPtr, DoubleList.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = LandmarkDetectorPINVOKE.DetectionValidator_bs_get(swigCPtr);
      DoubleList ret = (cPtr == global::System.IntPtr.Zero) ? null : new DoubleList(cPtr, false);
      return ret;
    } 
  }

  public DoubleMatList ws {
    set {
      LandmarkDetectorPINVOKE.DetectionValidator_ws_set(swigCPtr, DoubleMatList.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = LandmarkDetectorPINVOKE.DetectionValidator_ws_get(swigCPtr);
      DoubleMatList ret = (cPtr == global::System.IntPtr.Zero) ? null : new DoubleMatList(cPtr, false);
      return ret;
    } 
  }

  public DoubleMatList2N ws_nn {
    set {
      LandmarkDetectorPINVOKE.DetectionValidator_ws_nn_set(swigCPtr, DoubleMatList2N.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = LandmarkDetectorPINVOKE.DetectionValidator_ws_nn_get(swigCPtr);
      DoubleMatList2N ret = (cPtr == global::System.IntPtr.Zero) ? null : new DoubleMatList2N(cPtr, false);
      return ret;
    } 
  }

  public IntList activation_fun {
    set {
      LandmarkDetectorPINVOKE.DetectionValidator_activation_fun_set(swigCPtr, IntList.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = LandmarkDetectorPINVOKE.DetectionValidator_activation_fun_get(swigCPtr);
      IntList ret = (cPtr == global::System.IntPtr.Zero) ? null : new IntList(cPtr, false);
      return ret;
    } 
  }

  public IntList output_fun {
    set {
      LandmarkDetectorPINVOKE.DetectionValidator_output_fun_set(swigCPtr, IntList.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = LandmarkDetectorPINVOKE.DetectionValidator_output_fun_get(swigCPtr);
      IntList ret = (cPtr == global::System.IntPtr.Zero) ? null : new IntList(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_std__vectorT_std__vectorT_std__vectorT_std__vectorT_cv__Mat_T_float_t_t_t_t_t cnn_convolutional_layers {
    set {
      LandmarkDetectorPINVOKE.DetectionValidator_cnn_convolutional_layers_set(swigCPtr, SWIGTYPE_p_std__vectorT_std__vectorT_std__vectorT_std__vectorT_cv__Mat_T_float_t_t_t_t_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = LandmarkDetectorPINVOKE.DetectionValidator_cnn_convolutional_layers_get(swigCPtr);
      SWIGTYPE_p_std__vectorT_std__vectorT_std__vectorT_std__vectorT_cv__Mat_T_float_t_t_t_t_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_std__vectorT_std__vectorT_std__vectorT_std__vectorT_cv__Mat_T_float_t_t_t_t_t(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_std__vectorT_std__vectorT_std__vectorT_std__vectorT_std__pairT_int_cv__Mat_T_double_t_t_t_t_t_t cnn_convolutional_layers_dft {
    set {
      LandmarkDetectorPINVOKE.DetectionValidator_cnn_convolutional_layers_dft_set(swigCPtr, SWIGTYPE_p_std__vectorT_std__vectorT_std__vectorT_std__vectorT_std__pairT_int_cv__Mat_T_double_t_t_t_t_t_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = LandmarkDetectorPINVOKE.DetectionValidator_cnn_convolutional_layers_dft_get(swigCPtr);
      SWIGTYPE_p_std__vectorT_std__vectorT_std__vectorT_std__vectorT_std__pairT_int_cv__Mat_T_double_t_t_t_t_t_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_std__vectorT_std__vectorT_std__vectorT_std__vectorT_std__pairT_int_cv__Mat_T_double_t_t_t_t_t_t(cPtr, false);
      return ret;
    } 
  }

  public FloatList3N cnn_convolutional_layers_bias {
    set {
      LandmarkDetectorPINVOKE.DetectionValidator_cnn_convolutional_layers_bias_set(swigCPtr, FloatList3N.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = LandmarkDetectorPINVOKE.DetectionValidator_cnn_convolutional_layers_bias_get(swigCPtr);
      FloatList3N ret = (cPtr == global::System.IntPtr.Zero) ? null : new FloatList3N(cPtr, false);
      return ret;
    } 
  }

  public IntList2N cnn_subsampling_layers {
    set {
      LandmarkDetectorPINVOKE.DetectionValidator_cnn_subsampling_layers_set(swigCPtr, IntList2N.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = LandmarkDetectorPINVOKE.DetectionValidator_cnn_subsampling_layers_get(swigCPtr);
      IntList2N ret = (cPtr == global::System.IntPtr.Zero) ? null : new IntList2N(cPtr, false);
      return ret;
    } 
  }

  public FloatMatList2N cnn_fully_connected_layers_weights {
    set {
      LandmarkDetectorPINVOKE.DetectionValidator_cnn_fully_connected_layers_weights_set(swigCPtr, FloatMatList2N.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = LandmarkDetectorPINVOKE.DetectionValidator_cnn_fully_connected_layers_weights_get(swigCPtr);
      FloatMatList2N ret = (cPtr == global::System.IntPtr.Zero) ? null : new FloatMatList2N(cPtr, false);
      return ret;
    } 
  }

  public FloatList2N cnn_fully_connected_layers_bias {
    set {
      LandmarkDetectorPINVOKE.DetectionValidator_cnn_fully_connected_layers_bias_set(swigCPtr, FloatList2N.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = LandmarkDetectorPINVOKE.DetectionValidator_cnn_fully_connected_layers_bias_get(swigCPtr);
      FloatList2N ret = (cPtr == global::System.IntPtr.Zero) ? null : new FloatList2N(cPtr, false);
      return ret;
    } 
  }

  public IntList2N cnn_layer_types {
    set {
      LandmarkDetectorPINVOKE.DetectionValidator_cnn_layer_types_set(swigCPtr, IntList2N.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = LandmarkDetectorPINVOKE.DetectionValidator_cnn_layer_types_get(swigCPtr);
      IntList2N ret = (cPtr == global::System.IntPtr.Zero) ? null : new IntList2N(cPtr, false);
      return ret;
    } 
  }

  public FloatMatList2N cnn_fully_connected_layers_biases {
    set {
      LandmarkDetectorPINVOKE.DetectionValidator_cnn_fully_connected_layers_biases_set(swigCPtr, FloatMatList2N.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = LandmarkDetectorPINVOKE.DetectionValidator_cnn_fully_connected_layers_biases_get(swigCPtr);
      FloatMatList2N ret = (cPtr == global::System.IntPtr.Zero) ? null : new FloatMatList2N(cPtr, false);
      return ret;
    } 
  }

  public DoubleMatList mean_images {
    set {
      LandmarkDetectorPINVOKE.DetectionValidator_mean_images_set(swigCPtr, DoubleMatList.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = LandmarkDetectorPINVOKE.DetectionValidator_mean_images_get(swigCPtr);
      DoubleMatList ret = (cPtr == global::System.IntPtr.Zero) ? null : new DoubleMatList(cPtr, false);
      return ret;
    } 
  }

  public DoubleMatList standard_deviations {
    set {
      LandmarkDetectorPINVOKE.DetectionValidator_standard_deviations_set(swigCPtr, DoubleMatList.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = LandmarkDetectorPINVOKE.DetectionValidator_standard_deviations_get(swigCPtr);
      DoubleMatList ret = (cPtr == global::System.IntPtr.Zero) ? null : new DoubleMatList(cPtr, false);
      return ret;
    } 
  }

  public DetectionValidator() : this(LandmarkDetectorPINVOKE.new_DetectionValidator__SWIG_0(), true) {
  }

  public DetectionValidator(DetectionValidator other) : this(LandmarkDetectorPINVOKE.new_DetectionValidator__SWIG_1(DetectionValidator.getCPtr(other)), true) {
    if (LandmarkDetectorPINVOKE.SWIGPendingException.Pending) throw LandmarkDetectorPINVOKE.SWIGPendingException.Retrieve();
  }

  public double Check(SWIGTYPE_p_cv__Vec3d orientation, SWIGTYPE_p_cv__Mat_T_uchar_t intensity_img, SWIGTYPE_p_cv__Mat_T_double_t detected_landmarks) {
    double ret = LandmarkDetectorPINVOKE.DetectionValidator_Check(swigCPtr, SWIGTYPE_p_cv__Vec3d.getCPtr(orientation), SWIGTYPE_p_cv__Mat_T_uchar_t.getCPtr(intensity_img), SWIGTYPE_p_cv__Mat_T_double_t.getCPtr(detected_landmarks));
    if (LandmarkDetectorPINVOKE.SWIGPendingException.Pending) throw LandmarkDetectorPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void Read(string location) {
    LandmarkDetectorPINVOKE.DetectionValidator_Read(swigCPtr, location);
    if (LandmarkDetectorPINVOKE.SWIGPendingException.Pending) throw LandmarkDetectorPINVOKE.SWIGPendingException.Retrieve();
  }

  public int GetViewId(SWIGTYPE_p_cv__Vec3d orientation) {
    int ret = LandmarkDetectorPINVOKE.DetectionValidator_GetViewId(swigCPtr, SWIGTYPE_p_cv__Vec3d.getCPtr(orientation));
    if (LandmarkDetectorPINVOKE.SWIGPendingException.Pending) throw LandmarkDetectorPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
