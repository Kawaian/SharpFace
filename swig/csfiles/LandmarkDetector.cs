//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace LandmarkDetector
{

    public class LandmarkDetector
    {
        public static bool DetectLandmarksInVideo(SWIGTYPE_p_cv__Mat_T_uchar_t grayscale_image, SWIGTYPE_p_CLNF clnf_model, SWIGTYPE_p_FaceModelParameters arg2)
        {
            bool ret = LandmarkDetectorPINVOKE.DetectLandmarksInVideo__SWIG_0(grayscale_image.Pointer, clnf_model.Pointer, arg2.Pointer);
            if (LandmarkDetectorPINVOKE.SWIGPendingException.Pending) throw LandmarkDetectorPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public static bool DetectLandmarksInVideo(SWIGTYPE_p_cv__Mat_T_uchar_t grayscale_image, SWIGTYPE_p_cv__Rect_T_double_t bounding_box, SWIGTYPE_p_CLNF clnf_model, SWIGTYPE_p_FaceModelParameters arg3)
        {
            bool ret = LandmarkDetectorPINVOKE.DetectLandmarksInVideo__SWIG_1(grayscale_image.Pointer, bounding_box.Pointer, clnf_model.Pointer, arg3.Pointer);
            if (LandmarkDetectorPINVOKE.SWIGPendingException.Pending) throw LandmarkDetectorPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public static bool DetectLandmarksInImage(SWIGTYPE_p_cv__Mat_T_uchar_t grayscale_image, SWIGTYPE_p_CLNF clnf_model, SWIGTYPE_p_FaceModelParameters arg2)
        {
            bool ret = LandmarkDetectorPINVOKE.DetectLandmarksInImage__SWIG_0(grayscale_image.Pointer, clnf_model.Pointer, arg2.Pointer);
            if (LandmarkDetectorPINVOKE.SWIGPendingException.Pending) throw LandmarkDetectorPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public static bool DetectLandmarksInImage(SWIGTYPE_p_cv__Mat_T_uchar_t grayscale_image, SWIGTYPE_p_cv__Rect_T_double_t bounding_box, SWIGTYPE_p_CLNF clnf_model, SWIGTYPE_p_FaceModelParameters arg3)
        {
            bool ret = LandmarkDetectorPINVOKE.DetectLandmarksInImage__SWIG_1(grayscale_image.Pointer, bounding_box.Pointer, clnf_model.Pointer, arg3.Pointer);
            if (LandmarkDetectorPINVOKE.SWIGPendingException.Pending) throw LandmarkDetectorPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public static SWIGTYPE_p_cv__Vec6d GetPoseCamera(SWIGTYPE_p_CLNF clnf_model, double fx, double fy, double cx, double cy)
        {
            SWIGTYPE_p_cv__Vec6d ret = new SWIGTYPE_p_cv__Vec6d(LandmarkDetectorPINVOKE.GetPoseCamera(clnf_model.Pointer, fx, fy, cx, cy), true);
            if (LandmarkDetectorPINVOKE.SWIGPendingException.Pending) throw LandmarkDetectorPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public static SWIGTYPE_p_cv__Vec6d GetPoseWorld(SWIGTYPE_p_CLNF clnf_model, double fx, double fy, double cx, double cy)
        {
            SWIGTYPE_p_cv__Vec6d ret = new SWIGTYPE_p_cv__Vec6d(LandmarkDetectorPINVOKE.GetPoseWorld(clnf_model.Pointer, fx, fy, cx, cy), true);
            if (LandmarkDetectorPINVOKE.SWIGPendingException.Pending) throw LandmarkDetectorPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public static SWIGTYPE_p_cv__Vec6d GetCorrectedPoseCamera(SWIGTYPE_p_CLNF clnf_model, double fx, double fy, double cx, double cy)
        {
            SWIGTYPE_p_cv__Vec6d ret = new SWIGTYPE_p_cv__Vec6d(LandmarkDetectorPINVOKE.GetCorrectedPoseCamera(clnf_model.Pointer, fx, fy, cx, cy), true);
            if (LandmarkDetectorPINVOKE.SWIGPendingException.Pending) throw LandmarkDetectorPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public static SWIGTYPE_p_cv__Vec6d GetCorrectedPoseWorld(SWIGTYPE_p_CLNF clnf_model, double fx, double fy, double cx, double cy)
        {
            SWIGTYPE_p_cv__Vec6d ret = new SWIGTYPE_p_cv__Vec6d(LandmarkDetectorPINVOKE.GetCorrectedPoseWorld(clnf_model.Pointer, fx, fy, cx, cy), true);
            if (LandmarkDetectorPINVOKE.SWIGPendingException.Pending) throw LandmarkDetectorPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public static void get_video_input_output_params(StringList input_video_file, StringList output_files, StringList output_video_files, SWIGTYPE_p_bool world_coordinates_pose, SWIGTYPE_p_std__string output_codec, StringList arguments)
        {
            LandmarkDetectorPINVOKE.get_video_input_output_params(input_video_file.Pointer, output_files.Pointer, output_video_files.Pointer, world_coordinates_pose.Pointer, output_codec.Pointer, arguments.Pointer);
            if (LandmarkDetectorPINVOKE.SWIGPendingException.Pending) throw LandmarkDetectorPINVOKE.SWIGPendingException.Retrieve();
        }

        public static void get_camera_params(SWIGTYPE_p_int device, SWIGTYPE_p_float fx, SWIGTYPE_p_float fy, SWIGTYPE_p_float cx, SWIGTYPE_p_float cy, StringList arguments)
        {
            LandmarkDetectorPINVOKE.get_camera_params(device.Pointer, fx.Pointer, fy.Pointer, cx.Pointer, cy.Pointer, arguments.Pointer);
            if (LandmarkDetectorPINVOKE.SWIGPendingException.Pending) throw LandmarkDetectorPINVOKE.SWIGPendingException.Retrieve();
        }

        public static void get_image_input_output_params(StringList input_image_files, StringList output_feature_files, StringList output_pose_files, StringList output_image_files, CVDoubleRectList input_bounding_boxes, StringList arguments)
        {
            LandmarkDetectorPINVOKE.get_image_input_output_params(input_image_files.Pointer, output_feature_files.Pointer, output_pose_files.Pointer, output_image_files.Pointer, input_bounding_boxes.Pointer, arguments.Pointer);
            if (LandmarkDetectorPINVOKE.SWIGPendingException.Pending) throw LandmarkDetectorPINVOKE.SWIGPendingException.Retrieve();
        }

        public static void matchTemplate_m(SWIGTYPE_p_cv__Mat_T_float_t input_img, SWIGTYPE_p_cv__Mat_T_double_t img_dft, SWIGTYPE_p_cv__Mat _integral_img, SWIGTYPE_p_cv__Mat _integral_img_sq, SWIGTYPE_p_cv__Mat_T_float_t templ, Int_DoubleMatMap templ_dfts, SWIGTYPE_p_cv__Mat_T_float_t result, int method)
        {
            LandmarkDetectorPINVOKE.matchTemplate_m(input_img.Pointer, img_dft.Pointer, _integral_img.Pointer, _integral_img_sq.Pointer, templ.Pointer, templ_dfts.Pointer, result.Pointer, method);
            if (LandmarkDetectorPINVOKE.SWIGPendingException.Pending) throw LandmarkDetectorPINVOKE.SWIGPendingException.Retrieve();
        }

        public static SWIGTYPE_p_cv__Matx22d AlignShapesKabsch2D(SWIGTYPE_p_cv__Mat_T_double_t align_from, SWIGTYPE_p_cv__Mat_T_double_t align_to)
        {
            SWIGTYPE_p_cv__Matx22d ret = new SWIGTYPE_p_cv__Matx22d(LandmarkDetectorPINVOKE.AlignShapesKabsch2D(align_from.Pointer, align_to.Pointer), true);
            if (LandmarkDetectorPINVOKE.SWIGPendingException.Pending) throw LandmarkDetectorPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public static SWIGTYPE_p_cv__Matx22d AlignShapesWithScale(SWIGTYPE_p_cv__Mat_T_double_t src, SWIGTYPE_p_cv__Mat_T_double_t dst)
        {
            SWIGTYPE_p_cv__Matx22d ret = new SWIGTYPE_p_cv__Matx22d(LandmarkDetectorPINVOKE.AlignShapesWithScale(src.Pointer, dst.Pointer), true);
            if (LandmarkDetectorPINVOKE.SWIGPendingException.Pending) throw LandmarkDetectorPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public static void Project(SWIGTYPE_p_cv__Mat_T_double_t dest, SWIGTYPE_p_cv__Mat_T_double_t mesh, double fx, double fy, double cx, double cy)
        {
            LandmarkDetectorPINVOKE.Project(dest.Pointer, mesh.Pointer, fx, fy, cx, cy);
            if (LandmarkDetectorPINVOKE.SWIGPendingException.Pending) throw LandmarkDetectorPINVOKE.SWIGPendingException.Retrieve();
        }

        public static void DrawBox(SWIGTYPE_p_cv__Mat image, SWIGTYPE_p_cv__Vec6d pose, SWIGTYPE_p_cv__Scalar color, int thickness, float fx, float fy, float cx, float cy)
        {
            LandmarkDetectorPINVOKE.DrawBox__SWIG_0(image.Pointer, pose.Pointer, color.Pointer, thickness, fx, fy, cx, cy);
            if (LandmarkDetectorPINVOKE.SWIGPendingException.Pending) throw LandmarkDetectorPINVOKE.SWIGPendingException.Retrieve();
        }

        public static CVPoint2DPairList CalculateBox(SWIGTYPE_p_cv__Vec6d pose, float fx, float fy, float cx, float cy)
        {
            CVPoint2DPairList ret = new CVPoint2DPairList(LandmarkDetectorPINVOKE.CalculateBox(pose.Pointer, fx, fy, cx, cy), true);
            if (LandmarkDetectorPINVOKE.SWIGPendingException.Pending) throw LandmarkDetectorPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public static void DrawBox(CVPointPairList lines, SWIGTYPE_p_cv__Mat image, SWIGTYPE_p_cv__Scalar color, int thickness)
        {
            LandmarkDetectorPINVOKE.DrawBox__SWIG_1(lines.Pointer, image.Pointer, color.Pointer, thickness);
            if (LandmarkDetectorPINVOKE.SWIGPendingException.Pending) throw LandmarkDetectorPINVOKE.SWIGPendingException.Retrieve();
        }

        public static CVPoint2DList CalculateLandmarks(SWIGTYPE_p_cv__Mat_T_double_t shape2D, SWIGTYPE_p_cv__Mat_T_int_t visibilities)
        {
            CVPoint2DList ret = new CVPoint2DList(LandmarkDetectorPINVOKE.CalculateLandmarks__SWIG_0(shape2D.Pointer, visibilities.Pointer), true);
            if (LandmarkDetectorPINVOKE.SWIGPendingException.Pending) throw LandmarkDetectorPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public static CVPoint2DList CalculateLandmarks(CLNF clnf_model)
        {
            CVPoint2DList ret = new CVPoint2DList(LandmarkDetectorPINVOKE.CalculateLandmarks__SWIG_1(clnf_model.Pointer), true);
            if (LandmarkDetectorPINVOKE.SWIGPendingException.Pending) throw LandmarkDetectorPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public static void DrawLandmarks(SWIGTYPE_p_cv__Mat img, CVPointList landmarks)
        {
            LandmarkDetectorPINVOKE.DrawLandmarks(img.Pointer, landmarks.Pointer);
            if (LandmarkDetectorPINVOKE.SWIGPendingException.Pending) throw LandmarkDetectorPINVOKE.SWIGPendingException.Retrieve();
        }

        public static void Draw(SWIGTYPE_p_cv__Mat img, SWIGTYPE_p_cv__Mat_T_double_t shape2D, SWIGTYPE_p_cv__Mat_T_int_t visibilities)
        {
            LandmarkDetectorPINVOKE.Draw__SWIG_0(img.Pointer, shape2D.Pointer, visibilities.Pointer);
            if (LandmarkDetectorPINVOKE.SWIGPendingException.Pending) throw LandmarkDetectorPINVOKE.SWIGPendingException.Retrieve();
        }

        public static void Draw(SWIGTYPE_p_cv__Mat img, SWIGTYPE_p_cv__Mat_T_double_t shape2D)
        {
            LandmarkDetectorPINVOKE.Draw__SWIG_1(img.Pointer, shape2D.Pointer);
            if (LandmarkDetectorPINVOKE.SWIGPendingException.Pending) throw LandmarkDetectorPINVOKE.SWIGPendingException.Retrieve();
        }

        public static void Draw(SWIGTYPE_p_cv__Mat img, CLNF clnf_model)
        {
            LandmarkDetectorPINVOKE.Draw__SWIG_2(img.Pointer, clnf_model.Pointer);
            if (LandmarkDetectorPINVOKE.SWIGPendingException.Pending) throw LandmarkDetectorPINVOKE.SWIGPendingException.Retrieve();
        }

        public static SWIGTYPE_p_cv__Matx33d Euler2RotationMatrix(SWIGTYPE_p_cv__Vec3d eulerAngles)
        {
            SWIGTYPE_p_cv__Matx33d ret = new SWIGTYPE_p_cv__Matx33d(LandmarkDetectorPINVOKE.Euler2RotationMatrix(eulerAngles.Pointer), true);
            if (LandmarkDetectorPINVOKE.SWIGPendingException.Pending) throw LandmarkDetectorPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public static SWIGTYPE_p_cv__Vec3d RotationMatrix2Euler(SWIGTYPE_p_cv__Matx33d rotation_matrix)
        {
            SWIGTYPE_p_cv__Vec3d ret = new SWIGTYPE_p_cv__Vec3d(LandmarkDetectorPINVOKE.RotationMatrix2Euler(rotation_matrix.Pointer), true);
            if (LandmarkDetectorPINVOKE.SWIGPendingException.Pending) throw LandmarkDetectorPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public static SWIGTYPE_p_cv__Vec3d Euler2AxisAngle(SWIGTYPE_p_cv__Vec3d euler)
        {
            SWIGTYPE_p_cv__Vec3d ret = new SWIGTYPE_p_cv__Vec3d(LandmarkDetectorPINVOKE.Euler2AxisAngle(euler.Pointer), true);
            if (LandmarkDetectorPINVOKE.SWIGPendingException.Pending) throw LandmarkDetectorPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public static SWIGTYPE_p_cv__Vec3d AxisAngle2Euler(SWIGTYPE_p_cv__Vec3d axis_angle)
        {
            SWIGTYPE_p_cv__Vec3d ret = new SWIGTYPE_p_cv__Vec3d(LandmarkDetectorPINVOKE.AxisAngle2Euler(axis_angle.Pointer), true);
            if (LandmarkDetectorPINVOKE.SWIGPendingException.Pending) throw LandmarkDetectorPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public static SWIGTYPE_p_cv__Matx33d AxisAngle2RotationMatrix(SWIGTYPE_p_cv__Vec3d axis_angle)
        {
            SWIGTYPE_p_cv__Matx33d ret = new SWIGTYPE_p_cv__Matx33d(LandmarkDetectorPINVOKE.AxisAngle2RotationMatrix(axis_angle.Pointer), true);
            if (LandmarkDetectorPINVOKE.SWIGPendingException.Pending) throw LandmarkDetectorPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public static SWIGTYPE_p_cv__Vec3d RotationMatrix2AxisAngle(SWIGTYPE_p_cv__Matx33d rotation_matrix)
        {
            SWIGTYPE_p_cv__Vec3d ret = new SWIGTYPE_p_cv__Vec3d(LandmarkDetectorPINVOKE.RotationMatrix2AxisAngle(rotation_matrix.Pointer), true);
            if (LandmarkDetectorPINVOKE.SWIGPendingException.Pending) throw LandmarkDetectorPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public static bool DetectFaces(CVDoubleRectList o_regions, SWIGTYPE_p_cv__Mat_T_uchar_t intensity)
        {
            bool ret = LandmarkDetectorPINVOKE.DetectFaces__SWIG_0(o_regions.Pointer, intensity.Pointer);
            if (LandmarkDetectorPINVOKE.SWIGPendingException.Pending) throw LandmarkDetectorPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public static bool DetectFaces(CVDoubleRectList o_regions, SWIGTYPE_p_cv__Mat_T_uchar_t intensity, SWIGTYPE_p_cv__CascadeClassifier classifier)
        {
            bool ret = LandmarkDetectorPINVOKE.DetectFaces__SWIG_1(o_regions.Pointer, intensity.Pointer, classifier.Pointer);
            if (LandmarkDetectorPINVOKE.SWIGPendingException.Pending) throw LandmarkDetectorPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public static bool DetectSingleFace(SWIGTYPE_p_cv__Rect_T_double_t o_region, SWIGTYPE_p_cv__Mat_T_uchar_t intensity, SWIGTYPE_p_cv__CascadeClassifier classifier, SWIGTYPE_p_cv__Point preference)
        {
            bool ret = LandmarkDetectorPINVOKE.DetectSingleFace__SWIG_0(o_region.Pointer, intensity.Pointer, classifier.Pointer, preference.Pointer);
            if (LandmarkDetectorPINVOKE.SWIGPendingException.Pending) throw LandmarkDetectorPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public static bool DetectSingleFace(SWIGTYPE_p_cv__Rect_T_double_t o_region, SWIGTYPE_p_cv__Mat_T_uchar_t intensity, SWIGTYPE_p_cv__CascadeClassifier classifier)
        {
            bool ret = LandmarkDetectorPINVOKE.DetectSingleFace__SWIG_1(o_region.Pointer, intensity.Pointer, classifier.Pointer);
            if (LandmarkDetectorPINVOKE.SWIGPendingException.Pending) throw LandmarkDetectorPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public static bool DetectFacesHOG(CVDoubleRectList o_regions, SWIGTYPE_p_cv__Mat_T_uchar_t intensity, DoubleList confidences)
        {
            bool ret = LandmarkDetectorPINVOKE.DetectFacesHOG__SWIG_0(o_regions.Pointer, intensity.Pointer, confidences.Pointer);
            if (LandmarkDetectorPINVOKE.SWIGPendingException.Pending) throw LandmarkDetectorPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public static bool DetectFacesHOG(CVDoubleRectList o_regions, SWIGTYPE_p_cv__Mat_T_uchar_t intensity, SWIGTYPE_p_dlib__frontal_face_detector classifier, DoubleList confidences)
        {
            bool ret = LandmarkDetectorPINVOKE.DetectFacesHOG__SWIG_1(o_regions.Pointer, intensity.Pointer, classifier.Pointer, confidences.Pointer);
            if (LandmarkDetectorPINVOKE.SWIGPendingException.Pending) throw LandmarkDetectorPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public static bool DetectSingleFaceHOG(SWIGTYPE_p_cv__Rect_T_double_t o_region, SWIGTYPE_p_cv__Mat_T_uchar_t intensity, SWIGTYPE_p_dlib__frontal_face_detector classifier, SWIGTYPE_p_double confidence, SWIGTYPE_p_cv__Point preference)
        {
            bool ret = LandmarkDetectorPINVOKE.DetectSingleFaceHOG__SWIG_0(o_region.Pointer, intensity.Pointer, classifier.Pointer, confidence.Pointer, preference.Pointer);
            if (LandmarkDetectorPINVOKE.SWIGPendingException.Pending) throw LandmarkDetectorPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public static bool DetectSingleFaceHOG(SWIGTYPE_p_cv__Rect_T_double_t o_region, SWIGTYPE_p_cv__Mat_T_uchar_t intensity, SWIGTYPE_p_dlib__frontal_face_detector classifier, SWIGTYPE_p_double confidence)
        {
            bool ret = LandmarkDetectorPINVOKE.DetectSingleFaceHOG__SWIG_1(o_region.Pointer, intensity.Pointer, classifier.Pointer, confidence.Pointer);
            if (LandmarkDetectorPINVOKE.SWIGPendingException.Pending) throw LandmarkDetectorPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public static void ReadMatBin(SWIGTYPE_p_std__ifstream stream, SWIGTYPE_p_cv__Mat output_mat)
        {
            LandmarkDetectorPINVOKE.ReadMatBin(stream.Pointer, output_mat.Pointer);
            if (LandmarkDetectorPINVOKE.SWIGPendingException.Pending) throw LandmarkDetectorPINVOKE.SWIGPendingException.Retrieve();
        }

        public static void ReadMat(SWIGTYPE_p_std__ifstream stream, SWIGTYPE_p_cv__Mat output_matrix)
        {
            LandmarkDetectorPINVOKE.ReadMat(stream.Pointer, output_matrix.Pointer);
            if (LandmarkDetectorPINVOKE.SWIGPendingException.Pending) throw LandmarkDetectorPINVOKE.SWIGPendingException.Retrieve();
        }

        public static void SkipComments(SWIGTYPE_p_std__ifstream stream)
        {
            LandmarkDetectorPINVOKE.SkipComments(stream.Pointer);
            if (LandmarkDetectorPINVOKE.SWIGPendingException.Pending) throw LandmarkDetectorPINVOKE.SWIGPendingException.Retrieve();
        }

    }

}
